version: 2.1

executors:
  cider-ci:
    docker:
      - image: circleci/node:16
    working_directory: ~/Cider

orbs: # Add orbs to your configuration
  jira: circleci/jira@1.0.5 # invokes the Jira orb, making its commands accessible

# The jobs for this project
jobs:
  prepare-build:
    executor: cider-ci
    steps:
      - checkout
      #      - run:
      #          name: Rename Repository
      #          command: sed -i 's/github:ciderapp\/Cider/github:ciderapp\/cider-releases/' package.json
      - run:
          name: Update Package Managers
          command: sudo npm update -g npm yarn
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "cider.lock" }}
      - run:
          name: Install Node Dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "cider.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: TypeScript Compile
          command: yarn build
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - node_modules
            - build
            - resources
            - yarn.lock
            - package.json
            - winget.json # winget.json is a file that is generated by the winget package manager
            - LICENSE
            - license.txt

  build-linux:
    executor: cider-ci
    steps:
      - attach_workspace:
          at: ~/Cider
      - run:
          name: Fix Versioning and Add Channel
          command: yarn circle:script
      - run:
          name: Generate Builds (Linux)
          command: yarn electron-builder -l -p never
          post-steps:
            - jira/notify
      - persist_to_workspace:
          root: .
          paths:
            - dist/*.deb
            - dist/*.AppImage
            - dist/*.snap
            - dist/latest-linux.yml

  build-windows:
    executor: cider-ci
    steps:
      - attach_workspace:
          at: ~/Cider
      - run:
          name: Install Windows System Build Dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get install -y dpkg fakeroot wine64
            sudo dpkg --add-architecture i386
            sudo apt-get update -y
            sudo apt-get install -y wine32
      - run:
          name: Fix Versioning and Add Channel
          command: yarn circle:script
      - run:
          name: Generate Builds (Windows)
          command: yarn electron-builder -w --x64 -p never
          post-steps:
            - jira/notify
      - persist_to_workspace:
          root: .
          paths:
            - dist/*.exe
            - dist/Cider-Setup-*.exe.blockmap
            - dist/latest.yml

  build-winget:
    executor: cider-ci
    steps:
      - attach_workspace:
          at: ~/Cider
      - run:
          name: Install Windows System Build Dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get install -y dpkg fakeroot wine64
            sudo dpkg --add-architecture i386
            sudo apt-get update -y
            sudo apt-get install -y wine32
      - run:
          name: Fix Versioning and Add Channel
          command: yarn circle:script
      - run:
          name: Generate Builds (Winget)
          command: yarn electron-builder --win -c winget.json -p never
          post-steps:
            - jira/notify
      - persist_to_workspace:
          root: .
          paths:
            - dist/*.exe
            - dist/Cider-Setup-winget-*.exe.blockmap

  build-macos:
    executor: cider-ci
    macos:
      xcode: 12.5.1 # indicate your selected version of Xcode
    steps:
      - checkout
      - run:
          name: Sign into EVS
          run: |
            python3 -m pip install --upgrade castlabs-evs
            python3 -m castlabs_evs.account refresh -A ${{ secrets.EVS_ACCOUNT_NAME }} -P ${{ secrets.EVS_PASSWD }}
      - run:
          name: Build  
          environment: 
            CSC_LINK: ${{ secrets.CSC_LINK }}
            CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }} 
            APPLEID: ${{ secrets.APPLEID }}
            APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
            APPLE_ID: ${{ secrets.APPLEID }}
            APPLE_ID_PASSWORD: ${{ secrets.APPLEIDPASS }}
            PSC_NAME: ${{ secrets.PSC_NAME }}
            DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer
          run: |
            rm cider-yarn.lock || true
            xcodebuild -version
            yarn install
            cp resources/verror-types node_modules/@types/verror/index.d.ts
            cp resources/macPackager.js node_modules/app-builder-lib/out/macPackager.js 
            yarn dist:universalNotWorking -p never
      - run:
          name: Add license to dmg
          run: |
            npx dmg-license resources/license.json dist/*.dmg
      - run:
          name: Create PKG manually  
          environment:
            CSC_LINK: ${{ secrets.CSC_LINK }}
            CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }} 
            APPLEID: ${{ secrets.APPLEID }}
            APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          run: |
            pkgbuild --component dist/mac-universal/Cider.app --install-location /Applications dist/Cider.pkg --sign ${{ secrets.PSC_NAME }} 
            xcrun altool --notarize-app --primary-bundle-id com.ciderapp.cider -f dist/Cider.pkg  --username ${{ secrets.APPLEID }} --password ${{ secrets.APPLEIDPASS }}
            sleep 5m
            xcrun stapler staple dist/Cider.pkg || true
            mv dist/*.dmg dist/Cider.dmg
      - run:
          name: Build Application
          command: xcodebuild
      - run:
          name: Compress app for storage
          command: zip -r app.zip build/Release/circleci-demo-macos.app
      - store_artifacts:
          path: app.zip
          destination: app

  release:
    executor: cider-ci
    steps:
      - attach_workspace:
          at: ~/Cider/
      - run:
          name: Installing GitHub Command Line Interface
          command: |
            sudo apt-get update -y
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt-get update -y
            sudo apt install -y gh
      - run:
          name: Move Build Files
          command: |
            mkdir ~/Cider/dist/artifacts/
            mv ~/Cider/dist/*.exe ~/Cider/dist/artifacts
            mv ~/Cider/dist/*.deb ~/Cider/dist/artifacts
            mv ~/Cider/dist/*.AppImage ~/Cider/dist/artifacts
            mv ~/Cider/dist/*.snap ~/Cider/dist/artifacts
            mv ~/Cider/dist/*.yml ~/Cider/dist/artifacts
            mv ~/Cider/dist/*.blockmap ~/Cider/dist/artifacts
      - store_artifacts:
          path: ~/Cider/dist/artifacts
      - run:
          name: Set App Version
          command: echo "export APP_VERSION=$(grep '"version":.*' package.json | cut -d '"' -f 4 | head -1)" >> $BASH_ENV
      - run:
          name: Publish Release
          command: |
            gh release create "v${APP_VERSION}.${CIRCLE_BUILD_NUM}" --title "Cider Version ${APP_VERSION} - Build ${CIRCLE_BUILD_NUM} (${CIRCLE_BRANCH})" --generate-notes -R ciderapp/cider-releases ~/Cider/dist/artifacts/*.deb ~/Cider/dist/artifacts/*.AppImage ~/Cider/dist/artifacts/*.snap ~/Cider/dist/artifacts/*.exe ~/Cider/dist/artifacts/*.yml ~/Cider/dist/artifacts/*.blockmap

# Orchestrate our job run sequence
workflows:
  build_and_release:
    jobs:
      - build-macos
      - prepare-build:
          filters:
            branches:
              only: main
      - build-windows:
          requires:
            - prepare-build
          filters:
            branches:
              only: main
      - build-linux:
          requires:
            - prepare-build
          filters:
            branches:
              only: main
      - build-winget:
          requires:
            - prepare-build
          filters:
            branches:
              only: main
      - release:
          requires:
            - build-windows
            - build-linux
            - build-winget
          filters:
            branches:
              only: main
